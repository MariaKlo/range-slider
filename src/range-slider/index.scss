* { 
  font: inherit;
}

body {
  padding: 0;
  margin: 0;
  background-color: #fff;
  font-family: 'Montserrat';
  font-size: 0.87rem;
  color: black;
  overflow-x: hidden;
}

div, p, form, input, a, span, button {
  box-sizing: border-box;
}

p {
  padding: 0;
  margin: 0;
}

ul, li {
  display: block;
  padding: 0;
  margin: 0;
}

h1, h2, h3, h4, h5, h6 {
  padding: 0;
  margin: 0;
  font-weight: 700;
  text-transform: uppercase;
}

input, input:hover, input:focus, input:active,
button, button:hover, button:focus, button:active {
  outline: none;
}

button, button:hover, button:focus, button:active {
  cursor: pointer;
}

@mixin track() {
  width: 100%; height: 100%;
  background: none;
}
  
@mixin thumb() {
  border: none;
  width: var(--d); height: var(--d);
  border-radius: 50%;
  background: currentcolor;
  pointer-events: auto;
}
  
.wrap {
  --w: 20em;
  --h: 2em;
  --d: var(--h);
  --r: calc(.5*var(--d));
  --uw: calc(var(--w) - var(--d));
  --dif: calc(var(--max) - var(--min));
  display: grid;
  grid-template: max-content var(--h)/ var(--w);
  overflow: hidden;
  position: relative;
  margin: 1em auto;
  width: var(--w);
  font-family: ubuntu mono, consolas, monaco, monospace;
  
  &::before, &::after {
  grid-column: 1/ span 2;
  grid-row: 2;
  border-radius: var(--r);
  background: #ccc;
  content: ''
  }
  
  &::after {
  -webkit-mask: var(--fill);
  -webkit-mask-composite: xor;
  mask: var(--fill);
  mask-composite: exclude;
  background: #95a;
  }
}
  
.sr-only {
  position: absolute;
  clip-path: inset(50%)
}
  
input[type='range'] {
  &::-webkit-slider-runnable-track, 
  &::-webkit-slider-thumb, & {
    -webkit-appearance: none
  }
  grid-column: 1;
  grid-row: 2;
  z-index: 1;
  top: 0; left: 0;
  margin: 0;
  background: none;
  color: #000;
  pointer-events: none;
  &::-webkit-slider-runnable-track { 
    @include track;
  }
  &::-moz-range-track { 
    @include track;
  }
  
  &::-webkit-slider-thumb { 
    @include thumb;
  }
  &::-moz-range-thumb { 
    @include thumb;
  }
  
  &:focus {
    z-index: 2;
    outline: solid 0 transparent;
  
    &, & + output { 
      color: darkorange;
    }
  }
}
  
output {
  position: absolute;
  right: 0;
  color: transparent;
  
  &::after {
  counter-reset: c var(--c);
  content: counter(c)
  }
}