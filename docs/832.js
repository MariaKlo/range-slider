"use strict";(self.webpackChunkslider_plugin=self.webpackChunkslider_plugin||[]).push([[832],{58:(e,t,i)=>{i.d(t,{Z:()=>a});var s=i(537),r=i.n(s),n=i(645),o=i.n(n)()(r());o.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=o},468:(e,t,i)=>{i.d(t,{Z:()=>a});var s=i(537),r=i.n(s),n=i(645),o=i.n(n)()(r());o.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=o},832:(e,t,i)=>{var s=i(379),r=i.n(s),n=i(795),o=i.n(n),a=i(569),l=i.n(a),u=i(565),h=i.n(u),b=i(216),c=i.n(b),d=i(589),p=i.n(d),m=i(58),f={};f.styleTagTransform=p(),f.setAttributes=h(),f.insert=l().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=c();r()(m.Z,f);m.Z&&m.Z.locals&&m.Z.locals;var v=i(468),g={};g.styleTagTransform=p(),g.setAttributes=h(),g.insert=l().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=c();r()(v.Z,g);v.Z&&v.Z.locals&&v.Z.locals;const w=class{constructor(e){Object.defineProperty(this,"optionsForView",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"max",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"min",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"step",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"defaultValue",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"valueSecond",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"isMultiThumb",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showRightProgressBar",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showBubble",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"isVertical",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showTicks",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"ticksValues",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"barColor",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"thumbColor",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"bubbleColor",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"observers",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.max=Number(0===e.max?0:e.max||100),this.min=Number(e.min||0),this.step=Number(e.step||1),this.defaultValue=Number(0===e.defaultValue?0:e.defaultValue||50),this.valueSecond=Number(0===e.valueSecond?0:e.valueSecond||70),this.isMultiThumb=e.isMultiThumb||!1,this.showBubble=e.showBubble||!1,this.isVertical=e.isVertical||!1,this.showTicks=e.showTicks||!1,this.ticksValues=[],this.barColor=e.barColor||"linear-gradient(180deg, #cf6f7f 0%, #ea6666 100%)",this.thumbColor=e.thumbColor||"linear-gradient(180deg,  #cf6f7f 0%, #ea6666 100%)",this.bubbleColor=e.bubbleColor||"#eac966",this.observers=[],this.optionsForView={max:this.max,min:this.min,step:this.step,defaultValue:this.defaultValue,valueSecond:this.valueSecond,isMultiThumb:this.isMultiThumb,showBubble:this.showBubble,isVertical:this.isVertical,showTicks:this.showTicks,ticksValues:this.getTicks(),barColor:this.barColor,thumbColor:this.thumbColor,bubbleColor:this.bubbleColor}}init(){this.getTicks()}subscribe(e){this.observers.push(e)}update(e,t){this.isMultiThumb?this.limitToggle(e,t):this.limitStep(e,t)}updateObservers(){this.observers.forEach((e=>{e.updateView()}))}setDefaultValue(e){this.defaultValue=e}setSecondValue(e){this.valueSecond=e}calcNearestMaxValueConsideringStep(e,t=this.step){const i=e-e%t;return e%t>t/2?t+i:i}getTicks(e=this.min,t=this.max,i=this.step,s=this.showTicks){i<=0&&(i=1);const r=[];if(!s)return r;const n=(t-e)/i;if(n<=11)for(let s=e;s<=t;s+=i)r.push(s);else{const s=Math.round(n/10);let o=e;for(let e=0;e<n;e+=s)o<=t&&r.push(o),o+=i*s;o<=t&&r.push(o)}return r[r.length-1]!==t&&(r.pop(),r.push(t)),r}limitToggle(e,t){(t?e<this.valueSecond:e>this.defaultValue)?this.limitStep(e,t):this.updateObservers()}limitStep(e,t){const i=e%this.step==0;if(t)if(i)this.setDefaultValue(e);else{const t=this.calcNearestMaxValueConsideringStep(e);this.setDefaultValue(t),this.updateObservers()}else if(i)this.setSecondValue(e);else{const t=this.calcNearestMaxValueConsideringStep(e);this.setSecondValue(t),this.updateObservers()}}};const y=class{constructor(e,t,i,s,r,n,o){Object.defineProperty(this,"parent",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"wrapper",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"track",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"input",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"firstInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"secondInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"ticks",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"step",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"bar",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"thumb",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"form",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"observers",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"subscribe",{enumerable:!0,configurable:!0,writable:!0,value:e=>{this.observers.push(e)}}),Object.defineProperty(this,"init",{enumerable:!0,configurable:!0,writable:!0,value:()=>{if(this.createWrapper(),this.form.init(this.wrapper,this.options.isMultiThumb,this.options.min,this.options.max),this.createTrack(this.wrapper),this.bar.createProgressBar(this.track),this.bar.changeBarColor(this.options.barColor),this.thumb.init(this.track,this.options.isMultiThumb,this.options.showBubble,this.options.defaultValue,this.options.valueSecond),this.thumb.changeThumbColor(this.options.thumbColor,this.options.isMultiThumb),this.thumb.changeBubbleColor(this.options.bubbleColor,this.options.isMultiThumb),this.setInput(),this.eventInput(),this.bar.bar.onmousedown=e=>{this.clickOnBar(e)},this.track.onmousedown=e=>{this.clickOnBar(e)},this.eventHover(),this.eventActive(),this.options.isVertical&&this.wrapper.classList.add("range-slider_vertical"),this.options.isVertical&&this.options.showBubble&&this.thumb.rotateBubble(),this.options.showTicks){const e=this.ticks.createTicks(this.options.ticksValues,this.wrapper.offsetWidth),{ticksElement:t}=e,i=e.values;this.wrapper.append(t);for(let e=0;e<i.length;e+=1)i[e].element.addEventListener("click",this.onClick(i[e].value))}}}),Object.defineProperty(this,"createWrapper",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.wrapper=document.createElement("div"),this.wrapper.classList.add("range-slider"),this.setAttributesValue(),this.parent.append(this.wrapper)}}),Object.defineProperty(this,"setAttributesValue",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.options.isMultiThumb?(this.wrapper.setAttribute("first-value",String(this.options.defaultValue)),this.wrapper.setAttribute("second-value",String(this.options.valueSecond))):this.wrapper.setAttribute("default-value",String(this.options.defaultValue))}}),Object.defineProperty(this,"setInput",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.form.setValues(this.options.isMultiThumb,this.options.defaultValue,this.options.valueSecond);const e=this.bar.calcPercent(Number(this.form.input.value),Number(this.form.input.min),Number(this.form.input.max)),t=this.form.secondInput?this.bar.calcPercent(Number(this.form.secondInput.value),Number(this.form.secondInput.min),Number(this.form.secondInput.max)):NaN;this.bar.setDefault(this.options.isMultiThumb,e,t),this.thumb.placeThumb(this.options.isMultiThumb,e,t)}}),Object.defineProperty(this,"onInput",{enumerable:!0,configurable:!0,writable:!0,value:e=>e?()=>{this.update(Number(this.form.input.value),!0)}:()=>{this.update(Number(this.form.secondInput.value),e)}}),Object.defineProperty(this,"eventInput",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.form.input.addEventListener("input",this.onInput(!0)),this.options.isMultiThumb&&this.form.secondInput.addEventListener("input",this.onInput(!1))}}),Object.defineProperty(this,"getValueByCoords",{enumerable:!0,configurable:!0,writable:!0,value:(e,t)=>{let i=t.width;const s=this.options.max-this.options.min;let r=e.clientX-t.left;this.options.isVertical&&(r=e.clientY-t.top,i=t.height);const n=r/i*100;return Math.round(this.options.min+s*n/100)}}),Object.defineProperty(this,"clickOnBar",{enumerable:!0,configurable:!0,writable:!0,value:e=>{const t=this.track.getBoundingClientRect(),i=this.getValueByCoords(e,t);this.onClick(i)()}}),Object.defineProperty(this,"update",{enumerable:!0,configurable:!0,writable:!0,value:(e,t)=>{t?this.options.defaultValue=e:this.options.valueSecond=e,this.setInput(),this.observers.forEach((i=>{i.updateModel(e,t)})),this.setAttributesValue(),this.thumb.writeBubbleValue(this.options.isMultiThumb,this.options.defaultValue,this.options.valueSecond)}}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:e=>()=>{this.update(e,!0)}}),Object.defineProperty(this,"onMouseOverOut",{enumerable:!0,configurable:!0,writable:!0,value:(e,t)=>()=>{this.options.showBubble&&t&&t.classList.toggle("range-slider__bubble_big"),e.classList.toggle("range-slider__thumb_hover")}}),Object.defineProperty(this,"eventHover",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.form.input.addEventListener("mouseover",this.onMouseOverOut(this.thumb.firstThumb,this.thumb.showBubble)),this.form.input.addEventListener("mouseout",this.onMouseOverOut(this.thumb.firstThumb,this.thumb.showBubble)),this.options.isMultiThumb&&(this.form.secondInput.addEventListener("mouseover",this.onMouseOverOut(this.thumb.secondThumb,this.thumb.showSecondBubble)),this.form.secondInput.addEventListener("mouseout",this.onMouseOverOut(this.thumb.secondThumb,this.thumb.showSecondBubble)))}}),Object.defineProperty(this,"onMouseUpDown",{enumerable:!0,configurable:!0,writable:!0,value:e=>e?()=>{this.thumb.firstThumb.classList.toggle("range-slider__thumb_active")}:()=>{this.thumb.secondThumb.classList.toggle("range-slider__thumb_active")}}),Object.defineProperty(this,"eventActive",{enumerable:!0,configurable:!0,writable:!0,value:()=>{this.form.input.addEventListener("mousedown",this.onMouseUpDown(!0)),this.form.input.addEventListener("mouseup",this.onMouseUpDown(!0)),this.options.isMultiThumb&&(this.form.secondInput.addEventListener("mousedown",this.onMouseUpDown(!1)),this.form.secondInput.addEventListener("mouseup",this.onMouseUpDown(!1)))}}),this.parent=e,this.ticks=t,this.step=i,this.bar=s,this.thumb=r,this.form=n,this.options=o,this.observers=[]}createTrack(e){this.track=document.createElement("div"),this.track.classList.add("range-slider__track"),e.append(this.track)}};const O=class{constructor(){Object.defineProperty(this,"bar",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}createProgressBar(e){this.bar=document.createElement("div"),this.bar.classList.add("range-slider__progress-bar"),e.append(this.bar)}calcPercent(e,t,i){return(e-t)/(i-t)*100}setDefault(e,t,i){e?(this.bar.style.left=`${t}%`,this.bar.style.right=100-(i||0)+"%"):(this.bar.style.left=String(0),this.bar.style.right=100-t+"%")}changeBarColor(e){this.bar.style.background=e}};const T=class{constructor(){Object.defineProperty(this,"stepForm",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}createStep(){this.stepForm=document.createElement("input"),this.stepForm.type="range",this.stepForm.step="1"}calcMaxValueConsideringStep(e,t){const i=e/t,s=Math.floor(i)*t;this.stepForm.max=String(s>e||s<e?s:e)}};const P=class{constructor(){Object.defineProperty(this,"createTicks",{enumerable:!0,configurable:!0,writable:!0,value:(e,t)=>{const i=document.createElement("div");i.classList.add("range-slider__ticks");const s=[];for(let r=0;r<e.length;r+=1){const n=document.createElement("div");n.classList.add("range-slider__tick");const o=e[r];n.textContent=String(`– ${o}`),i.append(n);const a=e[0],l=e[e.length-1],u=Math.round((o-a)/(l-a)*100);n.style.left=`${u}%`,s.push({element:n,value:o}),n.style.marginLeft=`-${this.placeTicks(t)}%`}return{ticksElement:i,values:s}}}),Object.defineProperty(this,"placeTicks",{enumerable:!0,configurable:!0,writable:!0,value:e=>(.42*e+777.8)/e})}};const V=class{constructor(){Object.defineProperty(this,"firstThumb",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"secondThumb",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showBubble",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"showSecondBubble",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}init(e,t,i,s,r){this.createThumb(e,t),i&&(this.createBubbleElement(t,this.firstThumb,this.secondThumb),this.writeBubbleValue(t,s,r))}createThumb(e,t){this.firstThumb=document.createElement("div"),this.firstThumb.className="range-slider__thumb",e.append(this.firstThumb),t&&(this.firstThumb.classList.add("range-slider__thumb_first"),this.secondThumb=document.createElement("div"),this.secondThumb.classList.add("range-slider__thumb"),this.secondThumb.classList.add("range-slider__thumb_second"),e.append(this.secondThumb))}createBubbleElement(e,t,i){this.showBubble=document.createElement("p"),this.showBubble.classList.add("range-slider__bubble"),t.append(this.showBubble),e&&(this.showSecondBubble=document.createElement("p"),this.showSecondBubble.classList.add("range-slider__bubble"),i.append(this.showSecondBubble))}writeBubbleValue(e,t,i){this.showBubble&&(this.showBubble.textContent=`First value: ${String(t)}`,e&&(this.showSecondBubble.textContent=`Second value: ${String(i)}`))}placeThumb(e,t,i){this.firstThumb.style.left=`${t}%`,e&&(this.secondThumb.style.right=100-(i||0)+"%")}rotateBubble(){const e="range-slider__bubble_vertical";this.showBubble.classList.add(e),this.showSecondBubble&&this.showSecondBubble.classList.add(e)}changeThumbColor(e,t){this.firstThumb.style.background=e,t&&(this.secondThumb.style.background=e)}changeBubbleColor(e,t){this.showBubble&&(this.showBubble.style.backgroundColor=e),t&&this.showSecondBubble&&(this.showSecondBubble.style.backgroundColor=e)}};const j=class{constructor(e,t){Object.defineProperty(this,"view",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"model",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.view=e,this.model=t,this.init()}init(){this.view.init(),this.model.init(),this.model.subscribe(this),this.view.subscribe(this),this.view.options=this.model.optionsForView}updateModel(e,t){this.model.update(e,t)}updateView(){this.view.options.defaultValue=this.model.defaultValue,this.view.options.valueSecond=this.model.valueSecond,this.view.setInput()}};const S=class{constructor(){Object.defineProperty(this,"formDiv",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"input",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"secondInput",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}init(e,t,i,s){this.createForm(e),this.createInput(t),this.setMin(t,i),this.setMax(t,s)}createForm(e){this.formDiv=document.createElement("div"),this.formDiv.classList.add("range-slider__form"),e.append(this.formDiv)}createInput(e){e?(this.input=document.createElement("input"),this.input.type="range",this.input.classList.add("range-slider__input"),this.input.classList.add("range-slider__input_first"),this.formDiv.append(this.input),this.secondInput=document.createElement("input"),this.secondInput.type="range",this.secondInput.classList.add("range-slider__input"),this.secondInput.classList.add("range-slider__input_second"),this.formDiv.append(this.secondInput)):(this.input=document.createElement("input"),this.input.type="range",this.input.classList.add("range-slider__input"),this.formDiv.append(this.input))}setValues(e,t,i){this.input.value=String(t),e&&this.secondInput&&(this.secondInput.value=String(i))}setMax(e,t=100){this.input.max=String(t),e&&(this.secondInput.max=String(t))}setMin(e,t){this.input.min=String(t),e&&(this.secondInput.min=String(t))}};var k=i(755);k.fn.sliderPlugin=function(e){return new j(new y(this,new P,new T,new O,new V,new S,e),new w({max:e.max,min:e.min,step:e.step,defaultValue:e.isMultiThumb?e.defaultValue:e.valueSecond,valueSecond:e.valueSecond,isMultiThumb:e.isMultiThumb,showBubble:e.showBubble,isVertical:e.isVertical,showTicks:e.showTicks,ticksValues:e.ticksValues,barColor:e.barColor,thumbColor:e.thumbColor,bubbleColor:e.bubbleColor}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,